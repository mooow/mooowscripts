#!/usr/bin/env python3

from tkinter import *
from base64 import b64decode as b64dec , b64encode as b64enc
import codecs
import sys
import os

def rot13(string):
    return codecs.encode(string, "rot-13")

def encode(string):
    if string == "\n": return ""
    return b64enc(rot13(string).encode("UTF8")).decode("UTF8")

def decode(string):
    try:
        return rot13(b64dec(string.encode("UTF8")).decode("UTF8"))
    except:
        return ""

def copy(text):
    ( os.system ("xclip -selection clipboard -i << .\n{0}\n.\n".format(text)) or os.system ("xclip -selection primary -i << . \n{0}\n.\n".format(text)) ) and print("ERROR: xclip not found")

class Application:
    def __init__(self):
        self.frame = Frame(width=200, height=400)
        self.main = self.frame.winfo_toplevel()
        self.main.title(sys.argv[0])
        self.main.bind_class("Text","<KeyRelease>", self.keyrelease)
        self.main.bind_class("Text","<KeyPress>", self.keypress)
        self.frame.grid()

        self.l1 = Label(self.frame, text="Plain Text")
        self.l2 = Label(self.frame, text="base64/rot13")

        self.t1 = Text(self.frame, wrap='word')
        self.t2 = Text(self.frame, wrap='word')

        self.clear = Button(self.frame, text="Clear", command=self.clear)

        self.l1.grid(row=0, column=0)
        self.l2.grid(row=0, column=1)
        self.t1.grid(row=1, column=0)
        self.t2.grid(row=1, column=1)
        self.clear.grid(row=2, column=0, columnspan=2)

        self.frame.bind_all("<Escape>", self.exit)
        #self.t1.bind("Text","<KeyPress>", self.keypress)
        #self.t2.bind("Text","<KeyPress>", self.keypress)
        #self.t2.bind("Text","<KeyRelease>", self.keyrelease)
        #self.t2.bind("Text","<KeyRelease>", self.keyrelease)
            
        self.frame.mainloop()

    def keypress(self, evt):
        if not evt.state & 0x4: # and evt.keysym=="a": return "break"
            evt.widget.insert("insert", evt.char)


    def keyrelease(self, evt):
        ## DEBUG: print("evt.state={0} evt.keycode=[{1}]".format(hex(evt.state),evt.char))

        if evt.state & 0x0004 and evt.keysym=='a':
            self.selectall(evt)
        elif ( not evt.state & 0x0004 ) and evt.widget == self.t1:
            self.onchange1()
        elif ( not evt.state & 0x0004 ) and evt.widget == self.t2:
            self.onchange2()
        return "break"

    def clear(self, evt=None):
        self.t2.delete("1.0", "end")
        self.t1.delete("1.0", "end")

    def onchange1(self, evt=None):
        self.t2.delete("1.0", "end")
        text=self.t1.get("1.0", "end-1c")
        new=encode(text)
        self.t2.insert("insert", new)
        copy(new)

    def onchange2(self, evt=None):
        self.t1.delete("1.0", "end")
        text=self.t2.get("1.0", "end-1c")
        new=decode(text)
        self.t1.insert("insert", new)
        copy(new)

    def selectall(self, evt):
        ## DEBUG: print( "calling selectall" )
        idx=evt.widget.index("insert")
        evt.widget.tag_add("sel", "1.0", "end-1c")
        evt.widget.mark_set("insert", idx)
        #evt.widget.see(INSERT)
        #return "break"

    def exit(self, evt=None): self.frame.quit()

Application()
